#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       mime.types;

    # DM had to comment out when sending back raw data eg hello world
    #default_type  application/octet-stream;

   # log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
   #                   '$status $body_bytes_sent "$http_referer" '
   #                   '"$http_user_agent" "$http_x_forwarded_for" $request_headers';

    # DM no escaping so I can put in \n chars in headers 
    # is this a security problem?
    log_format  main escape=none '(remote_addr:)$remote_addr\n(remote_user:)$remote_user\n(time_local:)$time_local\n(request:)$request\n(status:)$status\n(http_referer)$http_referer\n(useragent:)$http_user_agent\n(xforward:)$http_x_forwarded_for\n(requestheaders:)\n$request_headers';

    access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    # redirect the www 
    server {
      listen        80;
      server_name   www.brokenlinkcheckerchecker.com;
      return 301    $scheme://brokenlinkcheckerchecker.com$request_uri;
    }

    # dotnet proxy to Kestrel
    server {
        listen       80;
        server_name  dnet.brokenlinkcheckerchecker.com;

        location / {
            proxy_pass         http://localhost:5000;
            proxy_http_version 1.1;
            proxy_set_header   Upgrade $http_upgrade;
            proxy_set_header   Connection keep-alive;
            proxy_set_header   Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Proto $scheme;
        }
    }

    limit_req_zone $binary_remote_addr zone=mylimit:10m rate=1r/s;
    limit_req_zone $binary_remote_addr zone=mylimit10s:10m rate=6r/m;
    # force 429 instead of 503
    limit_req_status 429;
    limit_conn_status 429;

    # static site on nginx
    server {
        listen       80;
        server_name  brokenlinkcheckerchecker.com localhost *.westeurope.cloudapp.azure.com;

        #charset koi8-r;
        #access_log  logs/host.access.log  main;
        location / {
            set_by_lua_block $request_headers {
              local h = ngx.req.get_headers()
              local request_headers_all = ""
              for k, v in pairs(h) do
                request_headers_all = request_headers_all .. ""..k..": "..v.."\n"
              end
              return request_headers_all
            }

            root   html;
            index  index.html;

            # eg /healthcheck.html will 302 to /healthcheck
            # which serves up healthcheck.html
            # https://stackoverflow.com/questions/38228393/nginx-remove-html-extension
            if ($request_uri ~ ^/(.*)\.html) {
                return 302 /$1;
            }
            try_files $uri $uri.html $uri/ =404;

        }

        location /ratelimit {
          limit_req zone=mylimit;
        }

        location /ratelimit10s {
          limit_req zone=mylimit10s;
        }

        # Useful to log all the request headers so can see if any tools
        # have more success
        # ie what headers are they sending
        # this will return the headers back to client, but not all clients display them (eg screaming frog trial edition)
        # so we can look in the access.log on the server
        location /echoback {
             set_by_lua_block $request_headers {
              local h = ngx.req.get_headers()
              local request_headers_all = ""
              for k, v in pairs(h) do
                request_headers_all = request_headers_all .. ""..k..": "..v.."\n"
              end
              return request_headers_all
            }

            echo_duplicate 1 $echo_client_request_headers;
            #echo $request_headers;
            # https://github.com/openresty/echo-nginx-module#echo_read_request_body
            # don't need the below as don't want to echo back the request body
            #echo_read_request_body;
            #echo $request_body;
            #root   html;
            #index  index.html index.htm;
        }

        location /helloworld {
           echo "Hello world"; 
        }
        # error_page trick "must be between 300 and 599"
        #error_page 200 /sc/200.html;
        location /200 {
             return 200 "200 from nginx.conf";
        }

        # 301 Moved Permanently
        location /301 {
            return 301 /;
        }

        # 301 to a non existant page
        location /301broken {
            return 301 /brokenurl;
        }

        # 301 to itself creating an infinite redirect loop
        location /301loop {
            return 301 /301loop;
        }

        # 302 Found (ie temporary redirect if a site is having maintenance done)
        location /302 {
            return 302 /;
        }



        error_page 403 /sc/403.html;
        location /403 {
             return 403;
        }

        error_page 404 /sc/404.html;

        error_page 418 /sc/418.html;
        location /418 {
             return 418;
        }

        # rate limiter
        error_page 429 /sc/429.html;
        location /429 {
             return 429;
        }

        error_page 500 /sc/500.html;
        location /500 {
             return 500;
        }

        #error_page 403 /sc/403.html;
        #            location = /sc/403.html {
        #            root    /html;
        #            allow   all;
        #}

        # redirect server error pages to the static page /50x.html
        #
        #error_page   500 502 503 504  /50x.html;                                                                
        #location = /50x.html {                                                                                  
        #    root   html;                                                                                        
        #}                                                                                                       
                                                                                                                
        # proxy the PHP scripts to Apache listening on 127.0.0.1:80                                             
        #                                                                                                       
        #location ~ \.php$ {                                                                                    
        #    proxy_pass   http://127.0.0.1;                                                                     
        #}                                                                                                      
                                                                                                                
        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000                                    
        #                                                                                                       
        #location ~ \.php$ {                                                                                    
        #    root           html;                                                                               
        #    fastcgi_pass   127.0.0.1:9000;                                                                     
        #    fastcgi_index  index.php;                                                                          
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;                                      
        #    include        fastcgi_params;                                                                     
        #}                                                                                                      
                                                                                                                
        # deny access to .htaccess files, if Apache's document root                                             
        # concurs with nginx's one                                                                              
        #                                                                                                       
        #location ~ /\.ht {                                                                                     
        #    deny  all;                                                                                         
        #}                                                                                                      
    }                                                                                                           
                                                                                                                
                                                                                                                
    # another virtual host using mix of IP-, name-, and port-based configuration                                
    #                                                                                                           
    #server {                                                                                                   
    #    listen       8000;                                                                                     
    #    listen       somename:8080;                                                                            
    #    server_name  somename  alias  another.alias;                                                           
                                                                                                                
    #    location / {                                                                                           
    #        root   html;                                                                                       
    #        index  index.html index.htm;                                                                       
    #    }                                                                                                      
    #}                                                                                                          
                                                                                                                
                                                                                                                
    # HTTPS server                                                                                              
    #                                                                                                           
    #server {                                                                                                   
    #    listen       443 ssl;                                                                                  
    #    server_name  localhost;                                                                                
                                                                                                                
    #    ssl_certificate      cert.pem;                                                                         
    #    ssl_certificate_key  cert.key;                                                                         
                                                                                                                
    #    ssl_session_cache    shared:SSL:1m;                                                                    
    #    ssl_session_timeout  5m;                                                                               
                                                                                                                
    #    ssl_ciphers  HIGH:!aNULL:!MD5;                                                                         
    #    ssl_prefer_server_ciphers  on;                                                                         
                                                                                                                
    #    location / {                                                                                           
    #        root   html;                                                                                       
    #        index  index.html index.htm;                                                                       
    #    }                                                                                                      
    #}                                                                                                          
}                                                                                                               
                                                                                                                